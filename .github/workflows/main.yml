name: Continuous Integration

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1
    
    strategy:
      matrix:
        target: 
          - linux-x64
          - linux-arm
          - linux-arm64
          - win-x64
          - osx-x64
        self-contained:
          - normal
          - self-contained
        include:
          - target: linux-x64
            os: ubuntu-latest
          - target: linux-arm
            os: ubuntu-latest
          - target: linux-arm64
            os: ubuntu-latest
          - target: win-x64
            os: windows-latest
          - target: osx-x64
            os: macos-latest
          
          - self-contained: normal
            build_args: --no-self-contained
            suffix: ""
          - self-contained: self-contained
            build_args: --self-contained -p:PublishTrimmed=true -p:TrimMode=partial
            suffix: "-self-contained"

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0.x'
        include-prerelease: true

    - name: Get version info
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}
      
    - name: Restore with dotnet
      run: dotnet restore src/OpenDirectoryDownloader

    - name: Build with dotnet
      run: dotnet build src/OpenDirectoryDownloader --configuration Release -p:Version=${{ steps.get_version.outputs.VERSION }}

    - name: Test with dotnet
      run: dotnet test src/OpenDirectoryDownloader --configuration Release -p:Version=${{ steps.get_version.outputs.VERSION }}

    - name: Publish with dotnet
      run: dotnet publish src/OpenDirectoryDownloader --configuration Release -p:Version=${{ steps.get_version.outputs.VERSION }} --framework net7.0 --runtime ${{ matrix.target }} ${{ matrix.build_args }} -p:PublishSingleFile=true --output ./OpenDirectoryDownloader-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}${{ matrix.suffix }}

    - name: Set executable bit (linux only)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        chmod +x ./OpenDirectoryDownloader-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}${{ matrix.suffix }}/OpenDirectoryDownloader

    - name: Zipping
      run: |
        7z a OpenDirectoryDownloader-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}${{ matrix.suffix }}.zip ./OpenDirectoryDownloader-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}${{ matrix.suffix }}/*
        # 7z is installed in all environments and supports unix permissions while compressing (but not while decompressing!)

    - name: Upload artifact for docker job (linux only)
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.self-contained == 'normal' }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.target }}
        path: |
          OpenDirectoryDownloader-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}${{ matrix.suffix }}.zip
          src/Dockerfile

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: all-artifacts
        path: |
          OpenDirectoryDownloader-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}${{ matrix.suffix }}.zip


  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: all-artifacts

    - name: Get tag info
      id: tag_info
      run: echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
    - name: Create release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_info.outputs.SOURCE_TAG }}
        name: OpenDirectoryDownloader ${{ steps.tag_info.outputs.SOURCE_TAG }}
        draft: false
        prerelease: false
        body: ${{ github.event.head_commit.message }}
        files: |
          OpenDirectoryDownloader-*.zip
    

  docker:
    needs: build

    strategy:
      matrix:
        target: 
          - linux-x64
          - linux-arm
          - linux-arm64
        include:
          - target: linux-x64
            os: ubuntu-latest
          - target: linux-arm
            os: ubuntu-latest
          - target: linux-arm64
            os: ubuntu-latest

    runs-on: ubuntu-latest
    steps:
      - name: Get version info
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}

      - name: Download artifact 
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.target }}

      - name: Decompress artifact
        uses: TonyBogdanov/zip@1.0
        with:
            args: unzip -qq ./OpenDirectoryDownloader-${{ steps.get_version.outputs.VERSION }}-${{ matrix.target }}.zip -d ./app

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get tag info
        id: tag_info
        run: echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
          
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./src/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/opendirectorydownloader:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/opendirectorydownloader:${{ steps.tag_info.outputs.SOURCE_TAG }}
